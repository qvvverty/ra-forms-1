{"version":3,"sources":["components/ColorDisplay.jsx","components/InputHex.jsx","components/OutputRgb.jsx","components/ColorConverter.jsx","App.js","reportWebVitals.js","index.js"],"names":["ColorDisplay","color","className","style","backgroundColor","InputHex","onInputChange","onChange","type","name","placeholder","OutputRgb","rgb","value","ColorConverter","useState","setRgb","inputEvent","input","target","length","test","rgbString","parseInt","substring","getRgbString","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAAe,SAASA,EAAT,GAAkC,IAAVC,EAAS,EAATA,MACrC,OAAO,qBAAKC,UAAU,aAAaC,MAAO,CAACC,gBAAiBH,KCD/C,SAASI,EAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,cACjC,OAAO,uBAAOC,SAAUD,EAAeJ,UAAU,QAAQM,KAAK,OAAOC,KAAK,MAAMC,YAAY,QCD/E,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,IAClC,OAAO,uBAAOV,UAAU,QAAQM,KAAK,OAAOC,KAAK,MAAMI,MAAOD,EAAKF,YAAY,QCIlE,SAASI,IAAkB,IAAD,EACjBC,mBAAS,IADQ,mBAChCH,EADgC,KAC3BI,EAD2B,KAkBvC,OACE,qCACE,sBAAKd,UAAU,iBAAf,UACE,cAACG,EAAD,CAAUC,cAVM,SAACW,GACrB,IAAMC,EAAQD,EAAWE,OAAON,MACX,IAAjBK,EAAME,SACR,oBAAoBC,KAAKH,GAASF,EAXjB,SAACE,GACpB,IAAII,EAAY,GAId,OAHAA,EAAY,OACZA,GAAaC,SAASL,EAAMM,UAAU,EAAG,GAAI,IAAM,MACnDF,GAAaC,SAASL,EAAMM,UAAU,EAAG,GAAI,IAAM,MAC/BD,SAASL,EAAMM,UAAU,EAAG,GAAI,IAAM,IAMjBC,CAAaP,IAAUF,EAAO,6CAQrE,cAACL,EAAD,CAAWC,IAAKA,OAElB,cAACZ,EAAD,CAAcC,MAAOW,OCpBZc,MANf,WACE,OACE,cAACZ,EAAD,KCOWa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f52efd4c.chunk.js","sourcesContent":["export default function ColorDisplay({ color }) {\n  return <div className=\"background\" style={{backgroundColor: color}} />\n}\n","export default function InputHex({ onInputChange }) {\n  return <input onChange={onInputChange} className=\"input\" type=\"text\" name=\"hex\" placeholder=\"HEX\" />\n}\n","export default function OutputRgb({ rgb }) {\n  return <input className=\"input\" type=\"text\" name=\"rgb\" value={rgb} placeholder=\"RGB\" />\n}\n","import { useState } from 'react';\nimport ColorDisplay from \"./ColorDisplay\";\nimport InputHex from \"./InputHex\";\nimport OutputRgb from \"./OutputRgb\";\n\nexport default function ColorConverter() {\n  const [rgb, setRgb] = useState('');\n\n  const getRgbString = (input) => {\n    let rgbString = '';\n      rgbString = 'rgb(';\n      rgbString += parseInt(input.substring(1, 3), 16) + ', ';\n      rgbString += parseInt(input.substring(3, 5), 16) + ', ';\n      return rgbString += parseInt(input.substring(5, 7), 16) + ')';\n  }\n\n  const onInputChange = (inputEvent) => {\n    const input = inputEvent.target.value;\n    if (input.length === 7) {\n      /#[\\d|a-f|A-F]{6}$/.test(input) ? setRgb(getRgbString(input)) : setRgb('Ошибка!');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"form-container\">\n        <InputHex onInputChange={onInputChange} />\n        <OutputRgb rgb={rgb} />\n      </div>\n      <ColorDisplay color={rgb} />\n    </>\n  )\n}\n","import './App.css';\nimport ColorConverter from './components/ColorConverter';\n\nfunction App() {\n  return (\n    <ColorConverter />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}